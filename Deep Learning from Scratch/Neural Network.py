'''
--------------------------------------------------------------------------------------
- 퍼셉트론 복습

        0 (b + w1*x1 + w2*x2 <= 0)
  y = 
        1 (b + w1*x1 + w2*x2 > 0)
  
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 편향을 명시한 퍼셉트론

  y = h(b + w1*x1 + w2*x2)  

            0 (x <= 0)
  h(x) = 
            1 (x > 0)
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 활성화 함수

        입력 신호의 총합을 출력 신호로 변환하는 함수
        
   a = b + w1*x1 + w2*x2        # a : 입력 신호의 총합
   
   y = h(a)                     # h() : 활성화 함수  y : 출력
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 시그모이드 함수

                 1              
    h(x) = --------------
            1 + exp(-x)
            
=> 신경망에서 활성화 함수로 시그모이드 함수를 이용하여 신호를 변환하고, 그 변환된 신호를 다음 뉴런에 전달
--------------------------------------------------------------------------------------
'''




'''
--------------------------------------------------------------------------------------
- 계단 함수
--------------------------------------------------------------------------------------
'''

import numpy as np

def step_function(x):
    if x > 0:
        return 1
    else:
        return 0

x = np.array([-1.0, 1.0, 2.0])
y = x > 0
y = y.astype(np.int)    # 넘파이 배열의 자료형을 변환하는 메소드


print(x)
print(y)




'''
--------------------------------------------------------------------------------------
- 계단 함수 그래프
--------------------------------------------------------------------------------------
'''

import numpy as np
import matplotlib.pyplot as plt

def step_function(x):
    return np.array(x > 0, dtype=np.int)

x = np.arange(-5.0, 5.0, 0.1)
y = step_function(x)

plt.plot(x, y)
plt.ylim(-0.1, 1.1)
plt.show()

'''
=> np.arange(-5.0, 5.0, 0.1) 은 -5.0 에서 5.0 전까지 0.1 간격의 넘파이 배열 생성
   step_function()은 인수로 받은 넘파이 배열의 원소 각각을 인수로 계단 함수를 실행해 그 결과를 다시 배열로 만들어 돌려준다
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 시그모이드 함수 구현
--------------------------------------------------------------------------------------
'''

import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

x = np.array([-1.0, 1.0, 2.0])
t = np.array([1.0, 2.0, 3.0])

print(sigmoid(x))
print(1.0 + t)
print(1.0 / t)



'''
--------------------------------------------------------------------------------------
- 시그모이드 함수 그래프
--------------------------------------------------------------------------------------
'''

import numpy as np
import matplotlib.pyplot as plt

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

x = np.arange(-5.0, 5.0, 0.1)
y = sigmoid(x)

plt.plot(x, y)
plt.ylim(-0.1, 1.1)
plt.show()



'''
--------------------------------------------------------------------------------------
- 시그모이드 함수와 계단 함수 비교

    => 시그모이드 함수는 부드러운 곡선이며 입력에 따라 출력이 연속적으로 변한다
       계단 함수는 0을 경계로 출력이 갑자기 바뀌어 버린다
       시그모이드 함수의 이 매끈함이 신경망 학습에서 아주 중요한 역할을 하게 된다!
       
    => 계단 함수가 0과 1중 하나의 값만 돌려주는 반면 
       시그모이드 함수는 실수를 돌려준다는 점
       
    => 계단 함수와 시그모이드 함수는 입력이 중요하면 큰 값을 출력하고 입력이 중요하지 않으면
       작은 값을 출력한다. 그리고 입력이 아무리 작거나 커도 출력을 0에서 1사이다!
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 비선형 함수 

    선형이 아닌 함수, 즉. 직선 1개로 그릴 수 없는 함수
    
    => 신경망에서는 활성화 함수로 비선형 함수를 사용해야 한다
       달리 말하면 선형 함수를 사용해서는 안된다!!
       그 이유는 바로 선형 함수를 이용하면 신경망의 층을 깊게 하는 의미가 없어지기 때문!!

    => 선형 함수의 문제는 층을 아무리 깊게 해도 은닉층이 없는 네트워크로도 똑같은 기능을 할 수 있다
       선형 함수를 이용해서 여러 층으로 구성하는 이점을 살릴 수 없다!!
       
    => 그래서 층을 쌓는 혜택을 얻고 싶다면 활성화 함수로는 반드시 비선형 함수 사용!!
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- ReLU 함수

    입력이 0을 넘으면 그 입력을 그대로 출력하고, 0 이하이면 0을 출력하는 함수
    
            x (x > 0)
    h(x) = 
            0 (x <= 0)
--------------------------------------------------------------------------------------
'''

import numpy as np

def ReLU(x):
    return np.maximum(0, x)     # maxinum 은 두 입력 중 큰 값을 선택해 반환하는 함수



'''
--------------------------------------------------------------------------------------
- 다차원 배열
--------------------------------------------------------------------------------------
'''

import numpy as np

B = np.array([[1,2], [3,4], [5,6]])

print(B)
print(np.ndim(B))       # 배열의 차원 수 확인
print(B.shape)          # 배열의 형상 확인



'''
--------------------------------------------------------------------------------------
- 행렬의 내적(행렬 곱)
--------------------------------------------------------------------------------------
'''

import numpy as np

A = np.array([[1,2], [3,4]])
B = np.array([[5,6], [7,8]])

print(A.shape)
print(B.shape)
print(np.dot(A, B))     # 두 행렬의 내적



'''
--------------------------------------------------------------------------------------
- 각 층의 신호 전달 구현

    1층의 가중치 부분
    
        A(1) = XW(1) + B(1)
        
        A(1) = (a1(1) , a2(1), a3(1))
        X = (x1, x2)
        B(1) = (b1(1), b2(1), b3(1))
                
               (w11(1), w21(1), w31(1))       
        W(1) = 
               (w12(1), w22(1), w32(1))
--------------------------------------------------------------------------------------
'''

# 입력층에서 1층으로의 신호 전달
import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

X = np.array([1.0, 0.5])
W1 = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])
B1 = np.array([0.1, 0.2, 0.3])
A1 = np.dot(X, W1) + B1
Z1 = sigmoid(A1)

print(W1.shape)
print(X.shape)
print(B1.shape)
print(A1)
print(Z1)


# 1층에서 2층으로의 신호 전달
W2 = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])
B2 = np.array([0.1, 0.2])
A2 = np.dot(Z1, W2) + B2
Z2 = sigmoid(A2)

print(W2.shape)
print(B2.shape)
print(A2)
print(Z2)


# 2층에서 출력층로의 신호 전달
def identify_function(x):
    return x

W3 = np.array([0.1, 0.3], [0.2, 0.4])
B3 = np.array([0.1, 0.2])
A3 = np.dot(Z2, W3) + B3
Y = identify_function(A3)

'''
=> 항등 함수인 identify_function() 를 정의하고 이를 출력층의 활성화 함수로 이용
   항등 함수는 입력을 그대로 출력하는 함수
   
=> 예를 들어 회귀에는 항등 함수를 2클래스 분류에는 시그모이드 함수를, 다중 클래스 분류에는 소프트맥스 함수
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 신경망 구현 정리
--------------------------------------------------------------------------------------
'''

import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def identify_function(x):
    return x

def init_network():
    network = {}
    network['W1'] = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])
    network['b1'] = np.array([0.1, 0.2, 0.3])
    network['W2'] = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])
    network['b2'] = np.array([0.1, 0.2])
    network['W3'] = np.array([[0.1, 0.3], [0.2, 0.4]])
    network['b3'] = np.array([[0.1, 0.2]])

    return network

def forward(network, x):
    W1, W2, W3 = network['W1'], network['W2'], network['W3']
    b1, b2, b3 = network['b1'], network['b2'], network['b3']

    a1 = np.dot(x, W1) + b1
    z1 = sigmoid(a1)
    a2 = np.dot(z1, W2) + b2
    z2 = sigmoid(a2)
    a3 = np.dot(z2, W3) + b3
    y = identify_function(a3)

    return y

network = init_network()
x = np.array([1.0, 0.5])
y = forward(network, x)

print(y)

'''
=> init_network() 함수는 가중치와 편향을 초기화하고 이들을 딕셔너리 변수인 network 에 저장
   이 딕셔너리 변수 network 에는 각 층에 필요한 매개변수(가중치와 편향)를 저장
   
=> forward() 함수는 입력 신호를 출력으로 변환하는 처리 과정을 모두 구현
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 소프트맥스 함수

                   exp(ak)
    yk = -------------------------
            시그마(i=1, n)exp(ai)
            
    
        n : 출력층의 뉴런 수           yk : 그중 k번째 출력
        
        소프트맥스 함수의 분자 : 입력 신호 ak 의 지수 함수
        소프트맥스 함수의 분모 : 모든 입력 신호의 지수 함수의 합
--------------------------------------------------------------------------------------
'''

import numpy as np

a = np.array([0.3, 2.9, 4.0])

exp_a = np.exp(a)           # 지수 함수
sum_exp_a = np.sum(exp_a)   # 지수 함수의 합
y = exp_a / sum_exp_a

print(exp_a)
print(sum_exp_a)
print(y)

# 소프트맥스 함수
def softmax(a):
    exp_a = np.exp(a)
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a

    return y




















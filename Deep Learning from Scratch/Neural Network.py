'''
--------------------------------------------------------------------------------------
- 퍼셉트론 복습

        0 (b + w1*x1 + w2*x2 <= 0)
  y = 
        1 (b + w1*x1 + w2*x2 > 0)
  
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 편향을 명시한 퍼셉트론

  y = h(b + w1*x1 + w2*x2)  

            0 (x <= 0)
  h(x) = 
            1 (x > 0)
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 활성화 함수

        입력 신호의 총합을 출력 신호로 변환하는 함수
        
   a = b + w1*x1 + w2*x2        # a : 입력 신호의 총합
   
   y = h(a)                     # h() : 활성화 함수  y : 출력
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 시그모이드 함수

                 1              
    h(x) = --------------
            1 + exp(-x)
            
=> 신경망에서 활성화 함수로 시그모이드 함수를 이용하여 신호를 변환하고, 그 변환된 신호를 다음 뉴런에 전달
--------------------------------------------------------------------------------------
'''




'''
--------------------------------------------------------------------------------------
- 계단 함수
--------------------------------------------------------------------------------------
'''

import numpy as np

def step_function(x):
    if x > 0:
        return 1
    else:
        return 0

x = np.array([-1.0, 1.0, 2.0])
y = x > 0
y = y.astype(np.int)    # 넘파이 배열의 자료형을 변환하는 메소드


print(x)
print(y)




'''
--------------------------------------------------------------------------------------
- 계단 함수 그래프
--------------------------------------------------------------------------------------
'''

import numpy as np
import matplotlib.pyplot as plt

def step_function(x):
    return np.array(x > 0, dtype=np.int)

x = np.arange(-5.0, 5.0, 0.1)
y = step_function(x)

plt.plot(x, y)
plt.ylim(-0.1, 1.1)
plt.show()

'''
=> np.arange(-5.0, 5.0, 0.1) 은 -5.0 에서 5.0 전까지 0.1 간격의 넘파이 배열 생성
   step_function()은 인수로 받은 넘파이 배열의 원소 각각을 인수로 계단 함수를 실행해 그 결과를 다시 배열로 만들어 돌려준다
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 시그모이드 함수 구현
--------------------------------------------------------------------------------------
'''

import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

x = np.array([-1.0, 1.0, 2.0])
t = np.array([1.0, 2.0, 3.0])

print(sigmoid(x))
print(1.0 + t)
print(1.0 / t)



'''
--------------------------------------------------------------------------------------
- 시그모이드 함수 그래프
--------------------------------------------------------------------------------------
'''

import numpy as np
import matplotlib.pyplot as plt

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

x = np.arange(-5.0, 5.0, 0.1)
y = sigmoid(x)

plt.plot(x, y)
plt.ylim(-0.1, 1.1)
plt.show()



'''
--------------------------------------------------------------------------------------
- 시그모이드 함수와 계단 함수 비교

    => 시그모이드 함수는 부드러운 곡선이며 입력에 따라 출력이 연속적으로 변한다
       계단 함수는 0을 경계로 출력이 갑자기 바뀌어 버린다
       시그모이드 함수의 이 매끈함이 신경망 학습에서 아주 중요한 역할을 하게 된다!
       
    => 계단 함수가 0과 1중 하나의 값만 돌려주는 반면 
       시그모이드 함수는 실수를 돌려준다는 점
       
    => 계단 함수와 시그모이드 함수는 입력이 중요하면 큰 값을 출력하고 입력이 중요하지 않으면
       작은 값을 출력한다. 그리고 입력이 아무리 작거나 커도 출력을 0에서 1사이다!
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 비선형 함수 

    선형이 아닌 함수, 즉. 직선 1개로 그릴 수 없는 함수
    
    => 신경망에서는 활성화 함수로 비선형 함수를 사용해야 한다
       달리 말하면 선형 함수를 사용해서는 안된다!!
       그 이유는 바로 선형 함수를 이용하면 신경망의 층을 깊게 하는 의미가 없어지기 때문!!

    => 선형 함수의 문제는 층을 아무리 깊게 해도 은닉층이 없는 네트워크로도 똑같은 기능을 할 수 있다
       선형 함수를 이용해서 여러 층으로 구성하는 이점을 살릴 수 없다!!
       
    => 그래서 층을 쌓는 혜택을 얻고 싶다면 활성화 함수로는 반드시 비선형 함수 사용!!
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- ReLU 함수

    입력이 0을 넘으면 그 입력을 그대로 출력하고, 0 이하이면 0을 출력하는 함수
    
            x (x > 0)
    h(x) = 
            0 (x <= 0)
--------------------------------------------------------------------------------------
'''

import numpy as np

def ReLU(x):
    return np.maximum(0, x)     # maxinum 은 두 입력 중 큰 값을 선택해 반환하는 함수



'''
--------------------------------------------------------------------------------------
- 다차원 배열
--------------------------------------------------------------------------------------
'''

import numpy as np

B = np.array([[1,2], [3,4], [5,6]])

print(B)
print(np.ndim(B))       # 배열의 차원 수 확인
print(B.shape)          # 배열의 형상 확인



'''
--------------------------------------------------------------------------------------
- 행렬의 내적(행렬 곱)
--------------------------------------------------------------------------------------
'''

import numpy as np

A = np.array([[1,2], [3,4]])
B = np.array([[5,6], [7,8]])

print(A.shape)
print(B.shape)
print(np.dot(A, B))     # 두 행렬의 내적



'''
--------------------------------------------------------------------------------------
- 각 층의 신호 전달 구현

    1층의 가중치 부분
    
        A(1) = XW(1) + B(1)
        
        A(1) = (a1(1) , a2(1), a3(1))
        X = (x1, x2)
        B(1) = (b1(1), b2(1), b3(1))
                
               (w11(1), w21(1), w31(1))       
        W(1) = 
               (w12(1), w22(1), w32(1))
--------------------------------------------------------------------------------------
'''

# 입력층에서 1층으로의 신호 전달
import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

X = np.array([1.0, 0.5])
W1 = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])
B1 = np.array([0.1, 0.2, 0.3])
A1 = np.dot(X, W1) + B1
Z1 = sigmoid(A1)

print(W1.shape)
print(X.shape)
print(B1.shape)
print(A1)
print(Z1)


# 1층에서 2층으로의 신호 전달
W2 = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])
B2 = np.array([0.1, 0.2])
A2 = np.dot(Z1, W2) + B2
Z2 = sigmoid(A2)

print(W2.shape)
print(B2.shape)
print(A2)
print(Z2)


# 2층에서 출력층로의 신호 전달
def identify_function(x):
    return x

W3 = np.array([0.1, 0.3], [0.2, 0.4])
B3 = np.array([0.1, 0.2])
A3 = np.dot(Z2, W3) + B3
Y = identify_function(A3)

'''
=> 항등 함수인 identify_function() 를 정의하고 이를 출력층의 활성화 함수로 이용
   항등 함수는 입력을 그대로 출력하는 함수
   
=> 예를 들어 회귀에는 항등 함수를 2클래스 분류에는 시그모이드 함수를, 다중 클래스 분류에는 소프트맥스 함수
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 신경망 구현 정리
--------------------------------------------------------------------------------------
'''

import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def identify_function(x):
    return x

def init_network():
    network = {}
    network['W1'] = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])
    network['b1'] = np.array([0.1, 0.2, 0.3])
    network['W2'] = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])
    network['b2'] = np.array([0.1, 0.2])
    network['W3'] = np.array([[0.1, 0.3], [0.2, 0.4]])
    network['b3'] = np.array([[0.1, 0.2]])

    return network

def forward(network, x):
    W1, W2, W3 = network['W1'], network['W2'], network['W3']
    b1, b2, b3 = network['b1'], network['b2'], network['b3']

    a1 = np.dot(x, W1) + b1
    z1 = sigmoid(a1)
    a2 = np.dot(z1, W2) + b2
    z2 = sigmoid(a2)
    a3 = np.dot(z2, W3) + b3
    y = identify_function(a3)

    return y

network = init_network()
x = np.array([1.0, 0.5])
y = forward(network, x)

print(y)

'''
=> init_network() 함수는 가중치와 편향을 초기화하고 이들을 딕셔너리 변수인 network 에 저장
   이 딕셔너리 변수 network 에는 각 층에 필요한 매개변수(가중치와 편향)를 저장
   
=> forward() 함수는 입력 신호를 출력으로 변환하는 처리 과정을 모두 구현
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 소프트맥스 함수

                   exp(ak)
    yk = -------------------------
            시그마(i=1, n)exp(ai)
            
    
        n : 출력층의 뉴런 수           yk : 그중 k번째 출력
        
        소프트맥스 함수의 분자 : 입력 신호 ak 의 지수 함수
        소프트맥스 함수의 분모 : 모든 입력 신호의 지수 함수의 합
--------------------------------------------------------------------------------------
'''

import numpy as np

a = np.array([0.3, 2.9, 4.0])

exp_a = np.exp(a)           # 지수 함수
sum_exp_a = np.sum(exp_a)   # 지수 함수의 합
y = exp_a / sum_exp_a

print(exp_a)
print(sum_exp_a)
print(y)

# 소프트맥스 함수(오버플로 대책 X)
def softmax(a):
    exp_a = np.exp(a)
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a

    return y



'''
--------------------------------------------------------------------------------------
- 소프트맥스 함수 구현 시 주의점
 
    소프트맥스 함수는 지수 함수를 사용하는데 지수 함수란 것이 쉽게 아주 큰 값을 내기 때문에 오버플로 문제!!
    
    
                  exp(ak)                             C exp(ak)
    yk = -------------------------      =   ---------------------------
            시그마(i=1, n)exp(ai)               C 시그마(i=1, n) exp(ai)
            
                                                        exp(ak + log C)
                                        =   ------------------------------------
                                               C 시그마(i=1, n) exp(ai + log C)
                                               
                                                          exp(ak + C')
                                        =   --------------------------------------
                                                   시그마(i=1, n) exp(ai + C')
                                                   
                                                   
                                        C' : 어떤 값을 대입해도 상관없지만, 오버플로를 막을 목적으로
                                             입력 신호 중 최댓값을 이용하는 것이 일반적
--------------------------------------------------------------------------------------
'''

import numpy as np

a = np.array([1010, 1000, 990])
c = np.max(a)

print(a-c)
print(np.exp(a-c) / np.sum(np.exp(a-c)))


# 소프트맥스 함수 (오버플로 대책 O)
def softmax(a):
    c = np.max(a)
    exp_a = np.exp(a-c)
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a

    return y



'''
--------------------------------------------------------------------------------------
- 소프트맥스 함수의 특징

   - 소프트맥스 함수의 출력은 0 에서 1.0 사이의 실수
    
   - 소프트맥스 함수 출력의 총 합은 1
    
   - 신경망을 이용한 분류에서는 일반적으로 가장 큰 출력을 내는 뉴런에 해당하는 클래스로만 인식
     그리고 소프트맥스 함수를 적용해도 출력이 가장 큰 뉴런의 위치는 달라지지 않는다
    
   - 결과적으로 신경망으로 분류할 때는 출력층의 소프트맥스 함수를 생략해도 된다
    
   - 현업에서도 지수 함수 계산에 드는 자원 낭비를 줄이고자 출력층의 소프트맥스 함수는 생략하는 것이 일반적
--------------------------------------------------------------------------------------
'''

import numpy as np

def softmax(a):
    c = np.max(a)
    exp_a = np.exp(a - c)
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a

    return y

a = np.array([0.3, 2.9, 4.0])
y = softmax(a)

print(y)
print(np.sum(y))



'''
--------------------------------------------------------------------------------------
- MNIST 데이터셋
--------------------------------------------------------------------------------------
'''

import sys, os
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정
import numpy as np
from MNIST import load_mnist
from PIL import Image


(x_train, t_train), (x_test, t_test) = load_mnist(flatten=True, normalize=False)

# 각 데이터의 형상 출력
print(x_train.shape)
print(t_train.shape)
print(x_test.shape)
print(t_test.shape)

'''
=> load_mnist 함수

        읽은 MNIST 데이터를 "(훈련 이미지, 훈련 레이블), (시험 이미지, 시험 레이블) 형식으로 반환"
        
        인수로는 normalize, flatten, one_hot_label 로 세 인수 모두 bool 값!
        
                normalize : 입력 이미지의 픽셀 값을 0.0 ~ 1.0 사이의 값으로 정규화할지를 정한다
                
                flatten : 입력 이미지를 평탄하게, 즉 1차원 배열로 만들지 정한다
                          
                          False 로 설정하면 입력 이미지를 1 X 28 X 28 의 3차원 배열로 저장
                          True 로 설정하면 784개의 원소로 이뤄진 1차원 배열로 저장  
                          
                one_hot_label : 레이블을 원-핫 인코딩 형태로 저장할지를 정한다 
--------------------------------------------------------------------------------------
'''




'''
--------------------------------------------------------------------------------------
- MNIST 이미지 불러오기
--------------------------------------------------------------------------------------
'''

import sys, os
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정
import numpy as np
from MNIST import load_mnist
from PIL import Image


def img_show(img):
    pil_img = Image.fromarray(np.uint8(img))
    pil_img.show()

(x_train, t_train), (x_test, t_test) = load_mnist(flatten=True, normalize=False)

img = x_train[0]
label = t_train[0]
print(label)  # 5

print(img.shape)  # (784,)
img = img.reshape(28, 28)  # 형상을 원래 이미지의 크기로 변형
print(img.shape)  # (28, 28)

img_show(img)

'''
=> 주의 사항

        flatten = True 로 설정해 읽어 들인 이미지는 1차원 넘파이 배열로 저장되어 있다
        그래서 이미지를 표시할 때는 원래 형상인 28 X 28 크기로 다시 변형해야한다
        
        reshape() 메서드에 원하는 형상을 인수로 지정하면 넘파이 배열의 형상을 바꿀 수 있다
        
        넘파이로 저장된 이미지 데이터를 PIL용 데이터 객체로 변환해야 하며, 이 변환은
        Image.formarray() 가 수행
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 신경망의 추론 처리


    입력층 뉴런 784개
    
        이미지의 크리가 28 X 28 = 784
        
    출력층 뉴런 10개
    
        0 에서 9 까지의 숫자 구분
        
    은닉층 총 두 개로, 첫 번째 은닉층에는 50개의 뉴런을 두 번째 은닉층에서는 100개의 뉴런 배치
    (여기서 50 과 100은 임의로 정한 값)
--------------------------------------------------------------------------------------
'''

import sys, os
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정
import numpy as np
import pickle
from MNIST import load_mnist


def sigmoid(x):
    return 1 / (1 + np.exp(-x))


def softmax(a):
    c = np.max(a)
    exp_a = np.exp(a - c)
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a

    return y


def get_data():
    (x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, flatten=True, one_hot_label=False)
    return x_test, t_test


def init_network():
    with open("sample_weight.pkl", 'rb') as f:
        network = pickle.load(f)
    return network


def predict(network, x):
    W1, W2, W3 = network['W1'], network['W2'], network['W3']
    b1, b2, b3 = network['b1'], network['b2'], network['b3']

    a1 = np.dot(x, W1) + b1
    z1 = sigmoid(a1)
    a2 = np.dot(z1, W2) + b2
    z2 = sigmoid(a2)
    a3 = np.dot(z2, W3) + b3
    y = softmax(a3)

    return y

x, t = get_data()
network = init_network()
accuracy_cnt = 0
for i in range(len(x)):
    y = predict(network, x[i])
    p = np.argmax(y) # 확률이 가장 높은 원소의 인덱스를 얻는다.
    if p == t[i]:
        accuracy_cnt += 1

print("Accuracy:" + str(float(accuracy_cnt) / len(x)))

'''
- init_network()

    pickle 파일인 sample_weight.pkl 에 저장된 학습된 가중치 매개변수 를 읽는다
    sample_weight.pkl : 가중치와 편향 매개변수가 딕셔너리 변수로 저장되어있다
    
- predict()

    각 레이블의 확률을 넘파이 배열로 반환
    예) : [0.1, 0.3, 0.2 ..... 0.04]  => 이미지가 숫자 0일 확률 0.1, 이미지가 숫자 1일 확률 0.3 ...... 
       
    np.argmax() 함수로 이 배열에서 값이 가장 큰(확률이 가장 높은) 원소의 인덱스를 구한다
    
    
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 배치 처리
--------------------------------------------------------------------------------------
'''

import sys, os
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정
import numpy as np
import pickle
from MNIST import load_mnist


def sigmoid(x):
    return 1 / (1 + np.exp(-x))


def softmax(a):
    c = np.max(a)
    exp_a = np.exp(a - c)
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a

    return y


def get_data():
    (x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, flatten=True, one_hot_label=False)
    return x_test, t_test


def init_network():
    with open("sample_weight.pkl", 'rb') as f:
        network = pickle.load(f)
    return network


def predict(network, x):
    W1, W2, W3 = network['W1'], network['W2'], network['W3']
    b1, b2, b3 = network['b1'], network['b2'], network['b3']

    a1 = np.dot(x, W1) + b1
    z1 = sigmoid(a1)
    a2 = np.dot(z1, W2) + b2
    z2 = sigmoid(a2)
    a3 = np.dot(z2, W3) + b3
    y = softmax(a3)

    return y

x, t = get_data()
network = init_network()

batch_size = 100    # 배치 크기
accuracy_cnt = 0

for i in range(0, len(x), batch_size):
    x_batch = x[i:i+batch_size]
    y_batch = predict(network, x_batch)
    p = np.argmax(y_batch, axis=1)
    accuracy_cnt += np.sum(p == t[i:i+batch_size])

print('Accuracy : ' + str(float(accuracy_cnt) / len(x)))


'''
=> range() 함수가 반환하는 리스트를 바탕으로 x[i:i+batch_size] 에서 입력 데이터를 묶는다
   예) batch_size 가 100 이므로 x[0:100], x[100:200] ...... 
   
   axis=1 이라는 인수를 추가한 것에 주의!
   이는 100 X 10 의 배열 중 1번째 차원을 구성하는 가 원소에서(1번째 차원을 축으로) 최댓값의 인덱스를 찾도록 한 것
   
   
--------------------------------------------------------------------------------------
'''


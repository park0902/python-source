'''
--------------------------------------------------------------------------------------
5.14 파일 이름 인코딩 우회

문제 : 시스템의 기본 인코딩으로 디코딩 혹은 인코딩되지 않은 파일 이름에 입출력 작업 수행하기
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- 기본적으로 모든 파일 이름은 sys.getfilesystemencoding() 이 반환하는 텍스트 인코딩 값으로 디코딩 혹은 인코딩되어 있다
--------------------------------------------------------------------------------------
'''

import sys

print(sys.getfilesystemencoding())

'''
--------------------------------------------------------------------------------------
- 위 인코딩을 우회하길 바란다면 로우(raw) 바이트 문자열로 파일 이름 명시!
--------------------------------------------------------------------------------------
'''

# 유니코드로 파일이름 쓰기
with open('e:\data\somefile.txt', 'w') as f:
    f.write('Spicy!')

# 디렉터리 리스트(디코딩됨)
import os

print(os.listdir('.'))

# 디렉터리 리스트(디코딩되지 않음)
import os

print(os.listdir(b'.'))

# 로우 파일 이름으로 파일 열기
with open(b'e:\data\somefile.txt') as f:
    print(f.read())

'''
=> open() 이나 os.listdir() 와 같은 파일 관련 함수에 바이트 문자열을 넣었을때 파일 이름 처리는 거의 변하지 않는다
--------------------------------------------------------------------------------------
'''





'''
--------------------------------------------------------------------------------------
5.15 망가진 파일 이름 출력

문제 : 프로그램에서 디렉터리 리스트를 받아 파일 이름을 출력하려고 할때 UnicodeEncodeError 예외와
      surrogates not allowed 메시지가 발생하면서 프로그램이 죽어 버린다
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- 출처를 알 수 없는 파일 이름을 출력할 때, 다음 코드로 에러 방지
--------------------------------------------------------------------------------------
'''

def bad_filename(filename):
    try:
        print(filename)

    except UnicodeEncodeError:
        print(bad_filename(filename))

    return repr(filename)[1:-1]

'''
--------------------------------------------------------------------------------------
- os.listdir() 와 같은 명령을 실행할 때, 망가진 파일 이름을 사용하면 파이썬에 문제가 생긴다

- 위 해결책으로 디코딩할 수 없는 바이트 값 \xhh 를 Unicode 문자 \udchh 로 표현하는 소위
  대리 인코딩(surrogate encoding) 으로 매핑하는 것
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- UTF-8 이 아닌 Latin-1 으로 인코딩한 bad.txt 를 포함한 디렉터리 리스트가가 어떻게 보이는지 예제 코드
--------------------------------------------------------------------------------------
'''

import os

files = os.listdir('.')

print(files)

'''
--------------------------------------------------------------------------------------
- 특히 선행 리스트를 출력하려고 하면 프로그램이 비정상적으로 종료
  프로그램이 죽는 이유는 \udce4가 잘못된 Unicode 이기 때문이다
  
- 대리 짝(surrogate pair) 으로 알려진 문자 두 개의 조합
  하지만 첫 번째 반쪽이 없기 때문에 올바른 Unicode라 할 수 없다
  따라서 올바른 출력을 하려면 망가진 파일 이름을 발견했을 때 교정 작업 필요!
--------------------------------------------------------------------------------------
'''

for name in files:
    try:
        print(name)
    except UnicodeEncodeError:
        print(bad_filename(name))

'''
--------------------------------------------------------------------------------------
- bad_filename() 함수 를 이용해 재인코딩 코드
--------------------------------------------------------------------------------------
'''

def bad_filename(filename):
    temp = filename.encode(sys.getfilesystemencoding(), errors='surrogateescape')
    return temp.decode('latin-1')

for name in files:
    try:
        print(name)
    except UnicodeEncodeError:
        print(bad_filename(name))





'''
--------------------------------------------------------------------------------------
5.16 이미 열려 있는 파일의 인코딩을 수정하거나 추가하기

문제 : 이미 열려 있는 파일을 닫지 않고 Unicode 인코딩을 추가하거나 변경하기
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- 바이너리 모드로 이미 열려 있는 파일 객체를 닫지 않고 Unicode 인코딩/디코딩을 추가하고 싶다면
  그 객체를 io.TextIOWrapper() 객체로 감싼다
--------------------------------------------------------------------------------------
'''

import urllib.request
import io

u = urllib.request.urlopen('http://www.python.org')
f = io.TextIOWrapper(u,encoding='utf-8')

text = f.read()

'''
--------------------------------------------------------------------------------------
- 텍스트 모드로 열린 파일의 인코딩을 변경하려면 detach() 메소드로 텍스트 인코딩 레이터를 제거하고
  다른 것으로 치환 (sys.stdout 의 인코딩 바꾸는 방법)
--------------------------------------------------------------------------------------
'''

import sys

print(sys.stdout.encoding)

sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='latin-1')

print(sys.stdout.encoding)


f = open('e:/data/somefile.txt','w')

print(f)
print(f.buffer)
print(f.buffer.raw)





'''
--------------------------------------------------------------------------------------
5.17 텍스트 파일에 바이트 쓰기

문제 : 텍스트 모드로 연 파일에 로우 바이트 쓰기
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- 단순히 바이트 데이터를 buffer 에 쓰기 
--------------------------------------------------------------------------------------
'''

import sys

# sys.stdout.write(b'Hello\n')

print(sys.stdout.buffer.write(b'Hello\n'))

'''
=> 위와 유사하게 텍스트 파일의 buffer 속성에서 바이너리 데이터를 읽을 수도 있다
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- I/O 시스템은 레이어로부터 만들어진다
  텍스트 파일은 버퍼 바이너리 모드 파일 상단에 Unicode 인코딩/디코딩 레이러를 추가해서 생성된다
  buffer 속성은 바로 이 파일 아래 부분을 가리킨다
  여기에 접근하면 텍스트 인코딩/디코딩 레이어를 우회할 수 있다
--------------------------------------------------------------------------------------
'''





'''
--------------------------------------------------------------------------------------
5.18 기존 파일 디스크립터를 파일 객체로 감싸기

문제 : 운영 체제 상에 이미 열려 있는 I/O 채널에 일치하는 정수형 파일 디스크립터를 가지고 있고
      (file, pipe, socket 등) 이를 상위 레벨 파이썬 파일 객체로 감싸기
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- 파일 디스크립터가 있을 때 open() 함수를 사용해 파이썬 파일 객체로 감쌀 수 있다
  하지만 이때 파일 이름 대신 정수형 파일 디스크립터를 먼저 전달해야 한다
--------------------------------------------------------------------------------------
'''

# 하위 레벨 파일 디스크립터 열기
import os

fd = os.open('e:/data/somefile.txt', os.O_WRONLY | os.O_CREAT)

# 올바른 파일로 바꾸기
f = open(fd, 'wt')
f.write('hello world\n')
f.close()

'''
--------------------------------------------------------------------------------------
- 상위 레벨 파일 객체가 닫혔거나 파괴되었다면 그 하단 파일 스크립터 역시 닫힌다
  이런 동작을 원하지 않는다면 closefd=False 인자를 open() 에 전달 
--------------------------------------------------------------------------------------
'''

import os

fd = os.open('e:/data/somefile.txt', os.O_WRONLY | os.O_CREAT)
f = open(fd, 'wt', closefd=False)

'''
--------------------------------------------------------------------------------------
- 소켓과 관련된 예제 코드
--------------------------------------------------------------------------------------
'''

from socket import socket, AF_INET, SOCK_STREAM

def echo_client(client_sock, addr):
    print('Got connection from', addr)

    # 읽기/쓰기를 위해 소켓에 대한 텍스트 모드 파일 래퍼(Wrapper)를 만든다
    client_in = open(client_sock.fileno(), 'rt', encoding='latin-1',closefd=False)
    client_out = open(client_sock.fileno(), 'wt', encoding='latin-1',closefd=False)

    # 파일 I/O를 사용해 클라이언트에 라인을 에코한다
    for line in client_in:
        client_out.write(line)
        client_out.flush()
    client_sock.close()

def echo_server(address):
    sock = socket(AF_INET, SOCK_STREAM)
    sock.bind(address)
    sock.listen(1)
    while True:
        client, addr = sock.accept()
        echo_client(client, addr)

'''
=> 소켓에 대한 파일 같은 인터페이스가 필요하고 크로스 플랫폼 코드가 필요하다면 소켓의 makefile() 메소드 사용
   하지만 이식성을 신경쓰지 않는다면 makefile()을 사용하는 것보다 앞에 나온 예제가 더 성능면에서 훨씬 뛰어나다
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- stdout(일반적으로 텍스트 모드로 열려 있다)에 바이너리 데이터를 넣기 위한 파일 객체를 만드는 코드
--------------------------------------------------------------------------------------
'''

import sys

# studot에 대한 바이너리 모드 파일 만들기
bstdout = open(sys.stdout.fileno(), 'wb', closefd=False)
bstdout.write(b'Hello World\n')
bstdout.flush()

'''
=> 기존 파일 디스크립터를 파일로 감싸는 것도 가능하지만, 모든 파일 모드를 지원하지 않을 수 있고 이런 파일 디스크립터에
   예상치 못한 부작용이 생길 수 있다(에러 처리, 파일 끝 찾기 등에서 특히 위험하다)
   또한 동작성이 운영 체제에 따라 달라지기도 한다
--------------------------------------------------------------------------------------
'''





'''
--------------------------------------------------------------------------------------
5.19 임시 파일 디렉터리 만들기

문제 : 임시 파일이나 디렉터리를 만들어 프로그램에 사용해야 한다
      그 후에 파일이나 디렉터리는 아마도 파기할 생각이다
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- tempfile 모듈에 이런 목적의 함수가 많이 있다
  이름 없는 임시 파일을 만들기 위해서 tempfile.TemporaryFile 사용
--------------------------------------------------------------------------------------
'''

from tempfile import TemporaryFile

with TemporaryFile('w+t') as f:
    f.write('Hello World\n')
    f.write('Testing\n')

    # 처음으로 이동해 데이터를 읽는다
    f.seek(0)
    data = f.read()

# 다음과 같이 파일을 사용할 수도 있다
# 임시 파일 사용
f = TemporaryFile('w+t')

# ...

# 파일 파기
f.colse()

'''
--------------------------------------------------------------------------------------
- TemporaryFile()에 전달하는 첫 번째 인자는 파일 모드이고, 텍스트 모드에는 대개 w+t를,
  바이너리 모드에는 w+b를 사용, 이 모드는 읽기와 쓰기를 동시에 지원하기 때문에 모드 변경을 위해
  파일을 닫으면 실제로 파기하므로 유용
  
- TemporaryFile()은 추가적으로 내장 함수 open()과 동일한 인자를 받는다
--------------------------------------------------------------------------------------
'''

with TemporaryFile('w+t', encoding='utf-8', errors='ignore') as f:
    ...

'''
--------------------------------------------------------------------------------------
- 대게 Unix 시스템에서 TemporaryFile()로 생성한 파일에 이름이 없고 디렉터리 엔트리도 갖지 않는다
  이 제한을 없애고 싶으면 NamedTempoaryFile() 을 사용
--------------------------------------------------------------------------------------
'''

from tempfile import NamedTemporaryFile

with NamedTemporaryFile('w+t') as f:
    print('filename is:', f.name)

'''
--------------------------------------------------------------------------------------
- f.name 속성에 임시 파일의 이름이 담겨있다. 다른 코드에 이 파일을 전달해야 할 필요가 생겼을 때 이 속성을 유용하게 사용

- TempoaryFile() 과 마찬가지로 생성된 파일의 사용이 끝났을 때 자동으로 삭제된다
  이런 동작을 원하지 않는다면 delete=False 키워드 인자 사용
--------------------------------------------------------------------------------------
'''

from tempfile import NamedTemporaryFile

with NamedTemporaryFile('w+t', delete=False) as f:
    print('filename is:', f.name)

'''
--------------------------------------------------------------------------------------
- 임시 디렉터리를 만들기 위해서는 tempfile.TemporaryDiretory() 사용
--------------------------------------------------------------------------------------
'''

from tempfile import TemporaryDirectory

with TemporaryDirectory() as dirname:
    print('dirname is : ', dirname)

'''
--------------------------------------------------------------------------------------
- 임시 파일과 디렉터리를 만들 때 TemporaryFile(), NamedTemporaryFile(), TemporaryDirectory() 함수가 가장 쉬운 방법
  이 함수는 생성과 추후 파기까지 모두 자동으로 처리
  
- 더 하위 레벨로 내려가면 mkstemp() 와 mkdtemp() 로 임시파일과 디렉터리를 만들 수 있다
--------------------------------------------------------------------------------------
'''

import tempfile

tempfile.mkstemp()

# 실제 위치를 찾으려면 tempfile.gettempdir() 함수 사용
tempfile.gettempdir()

# 모든 임시 파일 관련 함수는 디렉터리와 이름 규칙을 오버라이드할 수 있도록 하는데
# perfix, suffix, dir 키워드 사용

f = NamedTemporaryFile(prefix='mytemp', suffix='.txt', dir='/tmp')
f.name
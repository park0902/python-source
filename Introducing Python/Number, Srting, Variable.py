'''
--------------------------------------------------------------------------------------
Chapter 2 파이 재료 : 숫자, 문자열, 변수
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- 2.1 변수, 이름, 객체

    프로그래밍 언어에서는 변수를 선언하여 사용할 수 있다
    파이썬에서는 변수에 값을 할당하기 위해 = 을 사용!
    
    변수 이름에는 소문자, 대문자, 숫자, 언더스코어(_) 만 사용가능!
    이름은 숫자로 시작할 수 없다!
    예약어를 변수로 사용할 수 없다!    
--------------------------------------------------------------------------------------
'''

a = 7
b = a
c = 99.9
d = 'abc'

print(a)
print(type(a))
print(b)
print(type(b))
print(c)
print(type(c))
print(d)
print(type(d))



'''
--------------------------------------------------------------------------------------
- 2.2 숫자

    파이썬은 정수, 부동소수점를 지원하는 기능 내장!
    
    +(더하기)  -(빼기)   *(곱하기)  /(부동소수점 나누기)    
    //(정수 나누기(소수점 이하 버림)    %(나머지)      **(지수)
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- 2.2.1 정수

    연속된 숫자는 리터럴 정수로 간주!
    
    하지만 0을 다른 숫자 앞에 넣을 수 없다!
--------------------------------------------------------------------------------------
'''

print(5)
print(0)
# print(05)     에러
print(+123)
print(-123)
print(5+9)
print(100-7)
print(4+3-2-1+6)
print(5+9               +       3)
print(6*7*3*2)
print(9/5)      # 부동소수점 결과
print(9//5)     # 소수점 이하는 버리고 정수 출력

a = 95
a -= 3  # a = a- 3
a += 8  # a = a + 8
a *= 2  # a = a * 2
a /= 3  # a = a / 3
a //= 4 # a = a // 4

print(9%5)          # 첫번째 숫자를 두번재 숫자로 나눈 나머지 출력
print(divmod(9,5))  # (소수점을 제외한) 몫 과 나머지 동시에 출력



'''
--------------------------------------------------------------------------------------
- 2.2.2 우선순위

    파이썬에서는 곱셈은 덧셈보다 높은 우선순위!
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 2.2.3 진수

    파이썬에서는 10진수 외에도 세 가지 리터럴 정수 표현
    
        2진수 : 0b, 0B
        8진수 : 0o, 0O
        16진수 : 0x, 0X
--------------------------------------------------------------------------------------
'''

print(0b10)     # 2진수 10을 10진수로
print(0o10)     # 8진수 10을 10진수로
print(0x10)     # 10진수 10을 10진수로



'''
--------------------------------------------------------------------------------------
- 2.2.4 형변화

    다른 데이터 타입을 정수형으로 변환하려면 int() 함수 사용
    이 함수는 부동소수점, 혹은 숫자로 이루어진 문자열을 소수점을 버리고 정수를 반환!
    
    만약 숫자의 타입을 섞어서 사용하면, 파이썬은 자동으로 형변환!
    
    정수 혹은 부동소수점수와 같이 부울값을 계산할 때 False는 0 혹은 0.0
                                              True는 1 혹은 1.0 으로 간주!
--------------------------------------------------------------------------------------
'''

print(int(True))
print(int(False))

print(int(98.6))
print(int(1.0e4))

print(int('99'))
print(int('-23'))

print(True + 2)
print(False + 5.0)



'''
--------------------------------------------------------------------------------------
- 2.2.5 int의 크기

    파이썬 3에서는 long 이 사라지고, int의 크기가 유연해졌다!
    심지어 64 비트보다더 더 큰 공간을 가질 수 있다!
    (10**100 : 구골(googol)
--------------------------------------------------------------------------------------
'''

googol = 10 ** 100

print(googol)
print(googol * googol)



'''
--------------------------------------------------------------------------------------
- 2.2.6 부동소수점

    부동소수점(파이썬에서는 float)는 소수점이 있다
    
    부동소수점수로 형변환하기 위해서는 float() 함수 사용!
--------------------------------------------------------------------------------------
'''

print(float(True))
print(float(False))

print(float(98))
print(float('99'))
print(float('-1.5'))
print(float('1.0e4'))



'''
--------------------------------------------------------------------------------------
- 2.2.7 수학 함수

    파이썬에는 제곱근, 코사인 등과 같은 수학 함수가 있다!
--------------------------------------------------------------------------------------
'''





'''
--------------------------------------------------------------------------------------
- 2.3 문자열

    다른 언어와 달리 파이썬에서는 문자열이 불변!
    
    문자열 자체는 변경할 수 없지만, 같은 효과를 얻기 위해 문자열의 일부를 다른 문자열로 복사할 수는 있다
--------------------------------------------------------------------------------------
'''

'''
--------------------------------------------------------------------------------------
- 2.3.1 인용 부호로 문자열 생성

    단일 인용 부호 혹은 이중 인용 부호를 사용해서 문자열을 만들 수 있다!

    세 개의 단일 인용 부호 혹은 세 개의 이중 인용 부호를 사용할 수 있다! 
    세 개의 단일 인용 부호는 주로 여러 줄의 문자열에 사용!
        
    두 가지 인용 부호가 필요한 이유?
            
        단일 인용 부호의 문자열을 이중 인용 부호에 넣거나, 
        이중 인용 부호의 문자열을 단일 인용 부호에 넣기 위해서 이다
        
    빈 문자열을 이용하면 여러 문자열을 한 문자열로 합칠 때 문자열 사이에
    공백을 입력할 수 있어서 유용!
--------------------------------------------------------------------------------------
'''

print('Snap')
print("Crackle")

print("Nay, 'said the naysayer.")

print(""" Boom ! """)



'''
--------------------------------------------------------------------------------------
- 2.3.2 데이터 타입 변환 : str()

    str() 함수를 사용하여 데이터 타입을 문자열로 변환할 수 있다
--------------------------------------------------------------------------------------
'''

print(str(98.6))
print(str(1.0e4))
print(str(True))



'''
--------------------------------------------------------------------------------------
- 2.3.3 이스케이프 문자

    일반적인 이스케이프 시퀀스는 줄바꿈을 의미하는 \n 이다
    이것으로 한 줄의 문자열을 여러 줄의 문자열로 만들 수 있다
    
    \t : tab
    
    백슬래시를 입력하고 싶은 경우에는 백슬래시 두 번 입력!!
--------------------------------------------------------------------------------------
'''

print('\tabc')
print('a\tbc')
print('ab\tc')
print('abc\t')

print("Today we honor our friend, the backslash :\\.")



'''
--------------------------------------------------------------------------------------
- 2.3.4 결합 : +

    + 연산자를 사용하여 리터럴 문자열 또는 문자열 변수를 결합!
--------------------------------------------------------------------------------------
'''

print('Release the Kraken! ' + 'At once!')
print("My world" "A gentleman caller! ")



'''
--------------------------------------------------------------------------------------
- 2.3.5 복제하기

    연산자를 이용하여 문자열을 복제할 수 있다!
--------------------------------------------------------------------------------------
'''

start = 'Na' * 4 + '\n'
middle = 'Hey' * 3 + '\n'
end = 'Goodbye'

print(start + start + middle + end)



'''
--------------------------------------------------------------------------------------
- 2.3.6 문자 추출 : []

    문자열에서 한 문자를 얻기 위해서는 문자열 이름 뒤에 대괄호([]) 와 오프셋을 지정!
--------------------------------------------------------------------------------------
'''

letters = "abcdefghijklmnopqrstuvwxyz"
name = 'Henny'

print(letters[0])
print(letters[-2])

print(name.replace('H', 'P'))
print('P' + name[1:])



'''
--------------------------------------------------------------------------------------
- 2.3.7 슬라이스 : [start:end:step]

    슬라이스를 사용하여 한 문자열에서 문자열의 일부를 추출할 수 있다!
    
    대괄호를 사용하여 시작(start) 오프셋, 끝(end) 오프셋, 그리고 옵션으로 스텝(step)을 명시하여 슬라이스를 정의!

    [:] : 처음부터 끝까지 전체 시퀀스 추출
    [start:] : start 오프셋부터 끝까지 시퀀스 추출
    [:end] : 처음부터 (end-1) 오프셋까지 시퀀스 추출
    [start:end] : start 오프셋부터 (end-1) 오프셋까지 시퀀스 추출
    [start:end:step] : step 만큼 문자를 건너뛰면서, start 오프셋부터 (end-1) 오프셋까지 시퀀스 추출
--------------------------------------------------------------------------------------
'''

letters = "abcdefghijklmnopqrstuvwxyz"

print(letters[:])
print(letters[10:])
print(letters[12:15])
print(letters[-3:])
print(letters[18:-3])
print(letters[-6:-2])
print(letters[::7])
print(letters[4:20:3])
print(letters[19::4])
print(letters[:21:5])
print(letters[::-1])



'''
--------------------------------------------------------------------------------------
- 2.3.8 문자열 길이 : len()

    len() 함수는 문자열 길이를 센다!
--------------------------------------------------------------------------------------
'''

letters = "abcdefghijklmnopqrstuvwxyz"
empty = ""

print(len(letters))
print(len(empty))



'''
--------------------------------------------------------------------------------------
- 2.3.9 문자열 나누기 : split()

    split() 함수는 어떤 구분자를 기준으로 하나의 문자열을 작은 문자열들의 리스트로 나눠준다!
--------------------------------------------------------------------------------------
'''

tools = 'get gloves, get mask, get cat, get vitamins, get ambulance'

print(tools.split(','))



'''
--------------------------------------------------------------------------------------
- 2.3.10 문자열로 결합하기 : join()

    join() 함수는 문자열 리스트를 하나의 문자열로 결합
--------------------------------------------------------------------------------------
'''

crypto_list = ['Yeti', 'Bigfoot', 'Loch Ness Monster']

print(', '.join(crypto_list))



'''
--------------------------------------------------------------------------------------
- 2.3.11 문자열 다루기
--------------------------------------------------------------------------------------
'''

poem = 'ALL that doth flow we cannot liquid name Or else would fire name'
word = 'name'

print(len(poem))
print(poem.startswith('ALL'))
print(poem.endswith('Or else'))
print(poem.find(word))
print(poem.rfind(word))
print(poem.count(word))
print(poem.isalnum())



'''
--------------------------------------------------------------------------------------
- 2.3.12 대소문자와 배치
--------------------------------------------------------------------------------------
'''

setup = 'a duck goes into a bar'

print(setup.capitalize())   # 첫번째 단어를 대문자
print(setup.title())        # 모든 단어의 첫 글자를 대문자
print(setup.upper())        # 모든 글자를 대문자
print(setup.lower())        # 모든 글자를 소문자
print(setup.swapcase())     # 대문자는 소문자로, 소문자는 대문자로
print(setup.center(30))     # 문자열을 지정한 공간에서 중앙에 배치
print(setup.ljust(30))      # 문자열을 왼쪽에 배치
print(setup.rjust(30))      # 문자열을 오른쪽에 배치



'''
--------------------------------------------------------------------------------------
- 2.3.13 대체하기 : replace()

    replace() 함수는 문자열의 일부를 대채하기 위해서는 인자로 바꿀 문자열, 대채할 새 문자열,
    바꿀 문자열에 대한 횟수 입력!
    (마지막 인자를 생략하면 첫 번째 인스턴스만 바꾼다)
--------------------------------------------------------------------------------------
'''

setup = 'a duck goes into a bar'

print(setup.replace('duck', 'marmoset'))
print(setup.replace('a', 'a famous ', 100))
'''
--------------------------------------------------------------------------------------
- 3.1 리스트와 튜플

    파이썬에는 두 가지 다른 시퀀스 구조 : 튜플, 리스트
    
    튜플은 불변, 튜플에 항목을 할당하고 나서, 이를 바꿀 수 없다
    
    리스트는 변경 가능, 항목을 할당하고, 자유롭게 수정하거나 삭제할 수 있다
--------------------------------------------------------------------------------------
'''





'''
--------------------------------------------------------------------------------------
- 3.2 리스트

    리스트는 데이터를 순차적으로 파악하는데 유용
    
    문자열과 달리 리스트는 변경 가능!
    리스트의 현재 위치에서 새로운 요소를 추가하거나 삭제 혹은 기존 요소를 덮어쓸 수 있다!
    리스트에는 동일한 값이 여러 번 나타낼 수 있다!
--------------------------------------------------------------------------------------
'''



'''
--------------------------------------------------------------------------------------
- 3.2.1 리스트 생성하기 : [] 또는 list

    리스트는 0 혹은 그 이상의 요소로 만들어진다
    
    콤마(,)로 구분하고, 대괄호([]) 로 둘러싸여 있다
    또한 list() 함수로 빈 리스트를 할당 가능!
--------------------------------------------------------------------------------------
'''

empty_list = []

weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']

another_empty_list = list()



'''
--------------------------------------------------------------------------------------
- 3.2.2 다른 데이터 타입을 리스트로 변환하기 : list()

    list() 함수는 다른 데이터 타입을 리스트로 변환!
--------------------------------------------------------------------------------------
'''

a_tuple = ('ready', 'fire', 'aim')
birthday = '1/6/1952'
splitime = 'a/b///c/d///e'

print(list('cat'))
print(list(a_tuple))
print(birthday.split('/'))
print(splitime.split('/'))
print(splitime.split('//'))



'''
--------------------------------------------------------------------------------------
- 3.2.3 [offset]으로 항목 얻기

    문자열과 마찬가지로 리스트는 오프셋으로 하나의 특정 값을 추출!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo']

print(marxes[0])
print(marxes[-2])



'''
--------------------------------------------------------------------------------------
- 3.2.4 리스트의 리스트

    리스트는 리스트뿐만 아니라 다른 타입의 요소도 포함!
--------------------------------------------------------------------------------------
'''

small_birds = ['hummingbird', 'finch']
extinct_birds = ['dodo', 'passenger pigeon', 'Norwegian Blue']
carol_birds = [3, 'French hens', 2, 'turtledoves']
all_birds = [small_birds, extinct_birds, carol_birds]

print(all_birds)
print(all_birds[1])



'''
--------------------------------------------------------------------------------------
- 3.2.5 [offset]으로 항목 바꾸기

    오프셋으로 항목을 얻어서 바꿀 수 있다!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo']
marxes[2] = 'Wanda'

print(marxes)



'''
--------------------------------------------------------------------------------------
- 3.2.6 슬라이스로 항목 추출하기

    슬라이스를 사용해서 리스트의 서브시퀀스 추출!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo']

print(marxes[0:2])
print(marxes[::2])
print(marxes[::-1])



'''
--------------------------------------------------------------------------------------
- 3.2.7 리스트의 끝에 항목 추가하기 : append()

    append()는 리스트의 끝에 새 항목을 추가한다!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo']

marxes.append('Zeppo')

print(marxes)



'''
--------------------------------------------------------------------------------------
- 3.2.8 리스트 병합하기 : extend() 또는 +=

    extend() 를 사용하여 다른 리스트를 병합할 수 있다
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo']
others = ['Gummo', 'Karl']

marxes.extend(others)
marxes += others
marxes.append(others)

print(marxes)



'''
--------------------------------------------------------------------------------------
- 3.2.9 오프셋과 insert() 로 항목 추가하기

    append() 함수는 단지 리스트의 끝에 항목을 추가
    그러나 insert() 함수는 원하는 위치에 항목을 추가할 수 있다!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo']

marxes.insert(3, 'Gummo')

print(marxes)



'''
--------------------------------------------------------------------------------------
- 3.2.10 오프셋으로 항목 삭제하기 : del

    오프셋으로 리스트의 특정 항목을 삭제하면, 제거된 항목 이후의 항목들이 한 칸씩 앞으로 당겨지고,
    리스트의 길이가 1 감소!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo']

del marxes[2]

print(marxes)



'''
--------------------------------------------------------------------------------------
- 3.2.11 값으로 항목 삭제하기 : remove()

    리스트에서 삭제할 항목의 위치를 모르는 경우, remove() 와 값으로 그 항목을 삭제할 수 있다!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo', 'Gummo', 'Zeppo']

marxes.remove('Gummo')

print(marxes)



'''
--------------------------------------------------------------------------------------
- 3.2.12 오프셋으로 항목을 얻은 후 삭제하기 : pop()

    pop() 은 리스트에서 항목을 가져오는 동시에 그 항목을 삭제!
    
    오프셋과 함께 pop() 을 호출했다면 그 오프셋의 항목이 반환! (인자가 없다면 -1 을 사용)
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo']

print(marxes.pop())
print(marxes.pop(1))



'''
--------------------------------------------------------------------------------------
- 3.2.13 값으로 항목 오프셋 찾기 : index()

    항목 값의 리스트 오프셋을 알고 싶다면 index() 사용!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo']

print(marxes.index('Chico'))



'''
--------------------------------------------------------------------------------------
- 3.2.14 존재여부 확인하기 : in

    리스트에서 어떤 값의 존재를 확인하려면 in 사용!
    
    리스트에는 같은 값이 여러 개 존재할 수 있다.
    리스트에 값이 적어도 하나 존재하면 in은 True 를 반환!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo']

print('Groucho' in marxes)



'''
--------------------------------------------------------------------------------------
- 3.2.15 값 세기 : count()

    리스트에 특정 값이 얼마나 있는지 세기 위해서는 count() 사용!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo', 'Zeppo']
snl_skit = ['Cheeseburger', 'Cheeseburger']

print(marxes.count('Harpo'))
print(snl_skit.count('Cheeseburger'))



'''
--------------------------------------------------------------------------------------
- 3.2.16 문자열로 변환하기 : join()

    join() 의 인자는 문자열 혹은 반복 가능한 문자열의 시퀀스(리스트 포함)다!
    
    join() 이 리스트 메서드였다면, 튜플과 문자열 같은 다른 반복 가능한 객체와 함께 사용하지 못할 것이다
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo']
friends = ['Harry', 'Hermione', 'Ron']
separator = ' * '
joined = separator.join(friends)

print(', '.join(marxes))
print(joined)



'''
--------------------------------------------------------------------------------------
- 3.2.17 정렬하기 : sort()

    sort() : 리스트 자테를 내부적으로 정렬
    sorted() : 리스트의 정렬된 복사본을 반환
    
    리스트의 항목이 숫자인 경우, 기본적으로 오름차순으로 정렬!
    문자열인 경우, 알파벳순으로 정렬!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo']
numbers = [2, 1, 4.0, 3]

sorted_marxes = sorted(marxes)
numbers.sort(reverse=True)  # 내림차순 정렬

print(sorted_marxes)        # sorted_marxes 는 복사본
print(marxes)               # 원본 리스트는 변하지 않았다
print(numbers)



'''
--------------------------------------------------------------------------------------
- 3.2.18 항목 개수 얻기 : len()

    len() 은 리스트의 항목 수 반환!
--------------------------------------------------------------------------------------
'''

marxes = ['Groucho', 'Chico', 'Harpo']

print(len(marxes))



'''
--------------------------------------------------------------------------------------
- 3.2.19 할당 : =, 복사 : copy()

    한 리스트를 변수 두 곳에 할당했을 경우, 한 리스트를 변경하면 다른 리스트로 따라서 변경!
--------------------------------------------------------------------------------------
'''

a = [1, 2, 3]
b = a.copy()
c = list(a)
d = a[:]

a[0] = 'surprise'

print(a)    # 원본
print(b)    # 복사본
print(c)    # 복사본
print(d)    # 복사본